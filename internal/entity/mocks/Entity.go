// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	object "github.com/punkestu/theunderground-auth/internal/entity/object"
	request "github.com/punkestu/theunderground-auth/internal/entity/request"
	mock "github.com/stretchr/testify/mock"
)

// Entity is an autogenerated mock type for the Entity type
type Entity struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: _a0
func (_m *Entity) GetUser(_a0 string) (*object.User, object.Error) {
	ret := _m.Called(_a0)

	var r0 *object.User
	var r1 object.Error
	if rf, ok := ret.Get(0).(func(string) (*object.User, object.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *object.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) object.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(object.Error)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *Entity) Login(_a0 string, _a1 string) (string, object.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 object.Error
	if rf, ok := ret.Get(0).(func(string, string) (string, object.Error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) object.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(object.Error)
	}

	return r0, r1
}

// LoginWithKey provides a mock function with given fields: _a0
func (_m *Entity) LoginWithKey(_a0 string) (string, object.Error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 object.Error
	if rf, ok := ret.Get(0).(func(string) (string, object.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) object.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(object.Error)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *Entity) Register(_a0 request.Register) (string, object.Error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 object.Error
	if rf, ok := ret.Get(0).(func(request.Register) (string, object.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(request.Register) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(request.Register) object.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(object.Error)
	}

	return r0, r1
}

// NewEntity creates a new instance of Entity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *Entity {
	mock := &Entity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
