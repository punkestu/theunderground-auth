// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/punkestu/theunderground-auth/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repo) Create(_a0 entity.User) (string, entity.Error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 entity.Error
	if rf, ok := ret.Get(0).(func(entity.User) (string, entity.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.User) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.User) entity.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(entity.Error)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *Repo) GetByID(_a0 string) (*entity.User, entity.Error) {
	ret := _m.Called(_a0)

	var r0 *entity.User
	var r1 entity.Error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, entity.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) entity.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(entity.Error)
	}

	return r0, r1
}

// GetByKey provides a mock function with given fields: _a0
func (_m *Repo) GetByKey(_a0 string) (*entity.User, entity.Error) {
	ret := _m.Called(_a0)

	var r0 *entity.User
	var r1 entity.Error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, entity.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) entity.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(entity.Error)
	}

	return r0, r1
}

// GetByUsernameOrEmail provides a mock function with given fields: _a0
func (_m *Repo) GetByUsernameOrEmail(_a0 string) (*entity.User, entity.Error) {
	ret := _m.Called(_a0)

	var r0 *entity.User
	var r1 entity.Error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, entity.Error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) entity.Error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(entity.Error)
	}

	return r0, r1
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
